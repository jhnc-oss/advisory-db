<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RustSec Advisories</title><id>https://rustsec.org/feed.xml</id><updated>2025-02-24T12:00:00+00:00</updated><author><name>RustSec</name></author><icon>https://rustsec.org/favicon.ico</icon><link href="https://rustsec.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rustsec.org/" rel="alternate" type="text/html"/><subtitle xml:lang="en">Security advisories filed against Rust crates</subtitle><entry><title>RUSTSEC-2025-0008: Vulnerability in openh264-sys2</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0008.html</id><updated>2025-03-02T12:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0008.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0008: Vulnerability in openh264-sys2"/><published>2025-02-24T12:00:00+00:00</published><summary xml:lang="en">Openh264 Decoding Functions Heap Overflow Vulnerability</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/openh264-sys2/RUSTSEC-2025-0008.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/openh264-sys2/RUSTSEC-2025-0008.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0008&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0008
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Openh264 Decoding Functions Heap Overflow Vulnerability&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-24&quot;&gt;
          February 24, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-24&quot;&gt;
          February 24, 2025
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2025-03-02&quot;&gt;
          (last modified: March  2, 2025)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/openh264-sys2.html&quot;&gt;openh264-sys2&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/openh264-sys2&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/openh264.html&quot;&gt;#openh264&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/cisco/openh264/pull/3818/&quot;&gt;
              https://github.com/cisco/openh264/pull/3818/
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;related&quot;&gt;Related&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-27091&quot;&gt;CVE-2025-27091&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.8.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;OpenH264 recently reported a &lt;a href=&quot;https://github.com/cisco/openh264/security/advisories/GHSA-m99q-5j7x-7m9x&quot;&gt;heap overflow&lt;/a&gt; that was fixed in upstream &lt;a href=&quot;https://github.com/cisco/openh264/commit/63db555e30986e3a5f07871368dc90ae78c27449&quot;&gt;63db555&lt;/a&gt; and &lt;a href=&quot;https://github.com/ralfbiedert/openh264-rs/commit/3a822fff0b4c9a984622ca2b179fe8898ac54b14&quot;&gt;integrated into&lt;/a&gt; our 0.6.6 release. For users relying on Cisco&apos;s pre-compiled DLL, we also published 0.8.0, which is compatible with their latest fixed DLL version  2.6.0.&lt;/p&gt;
&lt;p&gt;In other words:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you rely on our &lt;code&gt;source&lt;/code&gt; feature only, &amp;gt;=0.6.6 should be safe,&lt;/li&gt;
&lt;li&gt;if you rely on &lt;code&gt;libloading&lt;/code&gt;, you must upgrade to 0.8.0 &lt;em&gt;and&lt;/em&gt; use their latest DLL &amp;gt;=2.6.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users handling untrusted video files should update immediately.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0007: ring is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0007.html</id><updated>2025-03-06T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2025-0007.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0007: ring is unmaintained"/><published>2025-02-21T12:00:00+00:00</published><summary xml:lang="en">*ring* is unmaintained</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/ring/RUSTSEC-2025-0007.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/ring/RUSTSEC-2025-0007.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0007&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        &lt;span class=&quot;withdrawn&quot;&gt;RUSTSEC-2025-0007&lt;/span&gt;
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;&lt;em&gt;ring&lt;/em&gt; is unmaintained&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    &lt;hr&gt;
    &lt;p class=&quot;warning&quot;&gt;This advisory has been withdrawn and should be ignored. It is kept only for reference.&lt;/p&gt;
    &lt;hr&gt;
    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-20&quot;&gt;
          February 20, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-21&quot;&gt;
          February 21, 2025
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2025-03-06&quot;&gt;
          (last modified: March  6, 2025)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/ring.html&quot;&gt;ring&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/ring&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/briansmith/ring/discussions/2414&quot;&gt;
              https://github.com/briansmith/ring/discussions/2414
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The author has announced an indefinite hiatus in its development, noting that
any reported security vulnerabilities may go unaddressed for prolonged periods
of time.&lt;/p&gt;
&lt;h1&gt;Update: security maintenance only&lt;/h1&gt;
&lt;p&gt;After this advisory was published, the author graciously agreed to give
access to the rustls team. The rustls team is committed to providing
security (only) maintenance for &lt;em&gt;ring&lt;/em&gt; for the foreseeable future.&lt;/p&gt;
&lt;h1&gt;Update: back to normal&lt;/h1&gt;
&lt;p&gt;Things are more-or-less back to how they were before, and in particular the
situation isn&apos;t &amp;quot;security maintenance only.&amp;quot;&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0435: Unsoundness in fyrox-core</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0435.html</id><updated>2025-02-14T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2024-0435.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0435: Unsoundness in fyrox-core"/><published>2025-02-14T12:00:00+00:00</published><summary xml:lang="en">Unsound usages of `Vec::from_raw_parts`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/fyrox-core/RUSTSEC-2024-0435.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/fyrox-core/RUSTSEC-2024-0435.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0435&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0435
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Unsound usages of &lt;code&gt;Vec::from_raw_parts&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-12-19&quot;&gt;
          December 19, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-14&quot;&gt;
          February 14, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/fyrox-core.html&quot;&gt;fyrox-core&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/fyrox-core&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/uninitialized.html&quot;&gt;#uninitialized&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/FyroxEngine/Fyrox/issues/630&quot;&gt;
              https://github.com/FyroxEngine/Fyrox/issues/630
            &lt;/a&gt;
          &lt;/li&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/FyroxEngine/Fyrox/pull/662&quot;&gt;
              https://github.com/FyroxEngine/Fyrox/pull/662
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.36&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;fyrox_core::transmute_vec_as_bytes&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.28.1, &amp;lt;=0.36&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The library provides a public safe API &lt;code&gt;transmute_vec_as_bytes&lt;/code&gt;, which incorrectly assumes that any generic type &lt;code&gt;T&lt;/code&gt; could have stable layout, causing to uninitialized memory exposure if the users pass any types with padding bytes as &lt;code&gt;T&lt;/code&gt; and cast it to &lt;code&gt;u8&lt;/code&gt; pointer.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;https://github.com/FyroxEngine/Fyrox/issues/630&quot;&gt;issue&lt;/a&gt;, we develop a PoC to show passing struct type to &lt;code&gt;transmute_vec_as_bytes&lt;/code&gt; could lead to undefined behavior with &lt;code&gt;Vec::from_raw_parts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The developers provide a patch by changing trait of &lt;code&gt;Copy&lt;/code&gt; to &lt;code&gt;Pod&lt;/code&gt;, which can make sure &lt;code&gt;T&lt;/code&gt; should be plain data. This was patched in the latest version of &lt;a href=&quot;https://github.com/FyroxEngine/Fyrox/blob/3f9ad6f9667047dac051b0e97d544e5b38e5ae72/fyrox-core/src/lib.rs#L351-L360&quot;&gt;master&lt;/a&gt; branch, but still not on the latest release (0.28.1).&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0006: Vulnerability in hickory-proto</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0006.html</id><updated>2025-02-10T12:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0006.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0006: Vulnerability in hickory-proto"/><published>2025-02-10T12:00:00+00:00</published><summary xml:lang="en">Hickory DNS failure to verify self-signed RRSIG for DNSKEYs</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/hickory-proto/RUSTSEC-2025-0006.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/hickory-proto/RUSTSEC-2025-0006.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0006&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0006
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Hickory DNS failure to verify self-signed RRSIG for DNSKEYs&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-07&quot;&gt;
          February  7, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-10&quot;&gt;
          February 10, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/hickory-proto.html&quot;&gt;hickory-proto&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/hickory-proto&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/dnssec.html&quot;&gt;#dnssec&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/hickory-dns/hickory-dns/security/advisories/GHSA-37wc-h8xc-5hc4&quot;&gt;
              https://github.com/hickory-dns/hickory-dns/security/advisories/GHSA-37wc-h8xc-5hc4
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;^0.24.3&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.25.0-alpha.5&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.8.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;hickory_proto::dnssec::DnssecDnsHandle::send&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.25.0-alpha.5&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;hickory_proto::xfer::DnssecDnsHandle::send&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.24.3&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.25.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;The DNSSEC validation routines treat entire RRsets of DNSKEY records as trusted once they have established trust in only one of the DNSKEYs. As a result, if a zone includes a DNSKEY with a public key that matches a configured trust anchor, all keys in that zone will be trusted to authenticate other records in the zone. There is a second variant of this vulnerability involving DS records, where an authenticated DS record covering one DNSKEY leads to trust in signatures made by an unrelated DNSKEY in the same zone.&lt;/p&gt;
&lt;p&gt;Details&lt;/p&gt;
&lt;p&gt;verify_dnskey_rrset() will return Ok(true) if any record&apos;s public key matches a trust anchor. This results in verify_rrset() returning a Secure proof. This ultimately results in successfully verifying a response containing DNSKEY records. verify_default_rrset() looks up DNSKEY records by calling handle.lookup(), which takes the above code path. There&apos;s a comment following this that says &amp;quot;DNSKEYs were already validated by the inner query in the above lookup&amp;quot;, but this is not the case. To fully verify the whole RRset of DNSKEYs, it would be necessary to check self-signatures by the trusted key over the other keys. Later in verify_default_rrset(), verify_rrset_with_dnskey() is called multiple times with different keys and signatures, and if any call succeeds, then its Proof is returned.&lt;/p&gt;
&lt;p&gt;Similarly, verify_dnskey_rrset() returns Ok(false) if any DNSKEY record is covered by a DS record. A comment says &amp;quot;If all the keys are valid, then we are secure&amp;quot;, but this is only checking that one key is authenticated by a DS in the parent zone&apos;s delegation point. This time, after control flow returns to verify_rrset(), it will call verify_default_rrset(). The special handling for DNSKEYs in verify_default_rrset() will then call verify_rrset_with_dnskey() using each KSK DNSKEY record, and if one call succeeds, return its Proof. If there are multiple KSK DNSKEYs in the RRset, then this leads to another authentication break. We need to either pass the authenticated DNSKEYs from the DS covering check to the RRSIG validation, or we need to perform this RRSIG validation of the DNSKEY RRset inside verify_dnskey_rrset() and cut verify_default_rrset() out of DNSKEY RRset validation entirely.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0005: Vulnerability in grcov</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0005.html</id><updated>2025-02-10T12:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0005.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0005: Vulnerability in grcov"/><published>2025-02-10T12:00:00+00:00</published><summary xml:lang="en">Out of bounds write triggered by crafted coverage data</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/grcov/RUSTSEC-2025-0005.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/grcov/RUSTSEC-2025-0005.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0005&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0005
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Out of bounds write triggered by crafted coverage data&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-13&quot;&gt;
          January 13, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-10&quot;&gt;
          February 10, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/grcov.html&quot;&gt;grcov&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/grcov&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1917475&quot;&gt;
              https://bugzilla.mozilla.org/show_bug.cgi?id=1917475
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;0.8.20&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;grcov::covdir::get_coverage&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;=0.8.20&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Function &lt;code&gt;grcov::covdir::get_coverage&lt;/code&gt; uses the &lt;code&gt;unsafe&lt;/code&gt; function &lt;code&gt;get_unchecked_mut&lt;/code&gt;
without validating that the index is in bounds.&lt;/p&gt;
&lt;p&gt;This results in memory corruption, and could potentially allow arbitrary code execution
provided that an attacker can feed the tool crafted coverage data.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0004: Vulnerability in openssl</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0004.html</id><updated>2025-02-02T12:00:00+00:00</updated><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0004.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0004: Vulnerability in openssl"/><published>2025-02-02T12:00:00+00:00</published><summary xml:lang="en">ssl::select_next_proto use after free</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/openssl/RUSTSEC-2025-0004.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/openssl/RUSTSEC-2025-0004.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0004&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0004
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;ssl::select_next_proto use after free&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-02&quot;&gt;
          February  2, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-02-02&quot;&gt;
          February  2, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/openssl.html&quot;&gt;openssl&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/openssl&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/ssl.html&quot;&gt;#ssl&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/tls.html&quot;&gt;#tls&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/alpn.html&quot;&gt;#alpn&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-rpmj-rpgj-qmpm&quot;&gt;GHSA-rpmj-rpgj-qmpm&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm&quot;&gt;
              https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm
            &lt;/a&gt;
          &lt;/li&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/sfackler/rust-openssl/pull/2360&quot;&gt;
              https://github.com/sfackler/rust-openssl/pull/2360
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.70&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;openssl::ssl::select_next_proto&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.0, &amp;lt;0.10.70&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In &lt;code&gt;openssl&lt;/code&gt; versions before &lt;code&gt;0.10.70&lt;/code&gt;, &lt;code&gt;ssl::select_next_proto&lt;/code&gt; can return a slice pointing into the &lt;code&gt;server&lt;/code&gt; argument&apos;s buffer but with a lifetime bound to the &lt;code&gt;client&lt;/code&gt; argument. In situations where the &lt;code&gt;server&lt;/code&gt; buffer&apos;s lifetime is shorter than the &lt;code&gt;client&lt;/code&gt; buffer&apos;s, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;openssl&lt;/code&gt; 0.10.70 fixes the signature of &lt;code&gt;ssl::select_next_proto&lt;/code&gt; to properly constrain the output buffer&apos;s lifetime to that of both input buffers.&lt;/p&gt;
&lt;p&gt;In standard usage of &lt;code&gt;ssl::select_next_proto&lt;/code&gt; in the callback passed to &lt;code&gt;SslContextBuilder::set_alpn_select_callback&lt;/code&gt;, code is only affected if the &lt;code&gt;server&lt;/code&gt; buffer is constructed &lt;em&gt;within&lt;/em&gt; the callback. For example:&lt;/p&gt;
&lt;p&gt;Not vulnerable - the server buffer has a &lt;code&gt;&apos;static&lt;/code&gt; lifetime:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;builder.set_alpn_select_callback(|_, client_protos| {
    ssl::select_next_proto(b&amp;quot;\x02h2&amp;quot;, client_protos).ok_or_else(AlpnError::NOACK)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not vulnerable - the server buffer outlives the handshake:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let server_protos = b&amp;quot;\x02h2&amp;quot;.to_vec();
builder.set_alpn_select_callback(|_, client_protos| {
    ssl::select_next_proto(&amp;amp;server_protos, client_protos).ok_or_else(AlpnError::NOACK)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vulnerable - the server buffer is freed when the callback returns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;builder.set_alpn_select_callback(|_, client_protos| {
    let server_protos = b&amp;quot;\x02h2&amp;quot;.to_vec();
    ssl::select_next_proto(&amp;amp;server_protos, client_protos).ok_or_else(AlpnError::NOACK)
});
&lt;/code&gt;&lt;/pre&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0003: Vulnerability in fast-float</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0003.html</id><updated>2025-01-29T12:00:00+00:00</updated><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0003.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0003: Vulnerability in fast-float"/><published>2025-01-29T12:00:00+00:00</published><summary xml:lang="en">Segmentation fault due to lack of bound check</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/fast-float/RUSTSEC-2025-0003.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/fast-float/RUSTSEC-2025-0003.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0003&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0003
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Segmentation fault due to lack of bound check&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-13&quot;&gt;
          January 13, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-29&quot;&gt;
          January 29, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/fast-float.html&quot;&gt;fast-float&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/fast-float&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/aldanor/fast-float-rust/issues/38&quot;&gt;
              https://github.com/aldanor/fast-float-rust/issues/38
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;fast_float::common::AsciiStr::first&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In this case, the &amp;quot;fast_float::common::AsciiStr::first&amp;quot; method within the &amp;quot;AsciiStr&amp;quot; struct
uses the unsafe keyword to reading from memory without performing bounds checking.
Specifically, it directly dereferences a pointer offset by &amp;quot;self.ptr&amp;quot;.
Because of the above reason, the method accesses invalid memory address when it takes an empty string as its input.
This approach violates Rust’s memory safety guarantees, as it can lead to invalid memory access if empty buffer is provided.&lt;/p&gt;
&lt;p&gt;No patched version for fast-float crate has been released, but a patch is available in the fast-float2 fork.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0002: Vulnerability in fast-float2</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0002.html</id><updated>2025-01-29T12:00:00+00:00</updated><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2025-0002.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0002: Vulnerability in fast-float2"/><published>2025-01-29T12:00:00+00:00</published><summary xml:lang="en">Segmentation fault due to lack of bound check</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/fast-float2/RUSTSEC-2025-0002.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/fast-float2/RUSTSEC-2025-0002.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0002&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0002
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Segmentation fault due to lack of bound check&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-13&quot;&gt;
          January 13, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-29&quot;&gt;
          January 29, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/fast-float2.html&quot;&gt;fast-float2&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/fast-float2&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/aldanor/fast-float-rust/issues/38&quot;&gt;
              https://github.com/aldanor/fast-float-rust/issues/38
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.2.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;fast_float2::common::AsciiStr::first&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.2.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In this case, the &amp;quot;fast_float2::common::AsciiStr::first&amp;quot; method within the &amp;quot;AsciiStr&amp;quot; struct
uses the unsafe keyword to reading from memory without performing bounds checking.
Specifically, it directly dereferences a pointer offset by &amp;quot;self.ptr&amp;quot;.
Because of the above reason, the method accesses invalid memory address when it takes an empty string as its input.
This approach violates Rust’s memory safety guarantees, as it can lead to invalid memory access if empty buffer is provided.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2024-0434: Security notice about matrix-sdk-crypto</title><id>https://rustsec.org/advisories/RUSTSEC-2024-0434.html</id><updated>2025-01-22T12:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2024-0434.html" rel="alternate" type="text/html" title="RUSTSEC-2024-0434: Security notice about matrix-sdk-crypto"/><published>2025-01-22T12:00:00+00:00</published><summary xml:lang="en"> Missing facility to signal rotation of a verified cryptographic identity</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/matrix-sdk-crypto/RUSTSEC-2024-0434.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/matrix-sdk-crypto/RUSTSEC-2024-0434.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2024-0434&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2024-0434
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Missing facility to signal rotation of a verified cryptographic identity&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2024-01-07&quot;&gt;
          January  7, 2024
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-22&quot;&gt;
          January 22, 2025
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/matrix-sdk-crypto.html&quot;&gt;matrix-sdk-crypto&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/matrix-sdk-crypto&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Notice
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-52813&quot;&gt;CVE-2024-52813&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-r5vf-wf4h-82gg&quot;&gt;GHSA-r5vf-wf4h-82gg&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg&quot;&gt;
              https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-r5vf-wf4h-82gg
            &lt;/a&gt;
          &lt;/li&gt;
        
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.8.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Versions of the matrix-sdk-crypto Rust crate before 0.8.0 lack a dedicated
mechanism to notify that a user&apos;s cryptographic identity has changed from a
verified to an unverified one, which could cause client applications relying on
the SDK to overlook such changes.&lt;/p&gt;
&lt;p&gt;matrix-sdk-crypto 0.8.0 adds a new &lt;code&gt;VerificationLevel::VerificationViolation&lt;/code&gt;
enum variant which indicates that a previously verified identity has been
changed.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2025-0001: Vulnerability in gix-worktree-state</title><id>https://rustsec.org/advisories/RUSTSEC-2025-0001.html</id><updated>2025-01-22T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2025-0001.html" rel="alternate" type="text/html" title="RUSTSEC-2025-0001: Vulnerability in gix-worktree-state"/><published>2025-01-18T12:00:00+00:00</published><summary xml:lang="en">gix-worktree-state nonexclusive checkout sets executable files world-writable</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/gix-worktree-state/RUSTSEC-2025-0001.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/gix-worktree-state/RUSTSEC-2025-0001.md&quot;&gt;Edit&lt;/a&gt; ⋅
          &lt;a href=&quot;https://api.osv.dev/v1/vulns/RUSTSEC-2025-0001&quot;&gt;JSON (OSV)&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2025-0001
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;gix-worktree-state nonexclusive checkout sets executable files world-writable&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-18&quot;&gt;
          January 18, 2025
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2025-01-18&quot;&gt;
          January 18, 2025
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2025-01-22&quot;&gt;
          (last modified: January 22, 2025)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/gix-worktree-state.html&quot;&gt;gix-worktree-state&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/gix-worktree-state&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/permissions.html&quot;&gt;#permissions&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-22620&quot;&gt;CVE-2025-22620&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-fqmf-w4xh-33rh&quot;&gt;GHSA-fqmf-w4xh-33rh&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;References&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh&quot;&gt;
              https://github.com/GitoxideLabs/gitoxide/security/advisories/GHSA-fqmf-w4xh-33rh
            &lt;/a&gt;
          &lt;/li&gt;
        
        
          &lt;li&gt;
            &lt;a href=&quot;https://github.com/advisories/GHSA-fqmf-w4xh-33rh&quot;&gt;
              https://github.com/advisories/GHSA-fqmf-w4xh-33rh
            &lt;/a&gt;
          &lt;/li&gt;
        
          &lt;li&gt;
            &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-22620&quot;&gt;
              https://nvd.nist.gov/vuln/detail/CVE-2025-22620
            &lt;/a&gt;
          &lt;/li&gt;
        
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;5 &lt;span class=&quot;tag medium&quot;&gt;
        MEDIUM
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Local&lt;/dd&gt;
          

          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;Low&lt;/d&gt;
          

          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;Low&lt;/dd&gt;
          

          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;Required&lt;/dd&gt;
          

          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Unchanged&lt;/dd&gt;
          

          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;High&lt;/dd&gt;
          

          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N&quot;&gt;CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N&lt;/a&gt;&lt;/dd&gt;

      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.17.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;gix_worktree_state::checkout&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;0.17.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gix-worktree-state&lt;/code&gt; specifies 0777 permissions when checking out executable files, intending that the umask will restrict them appropriately. But one of the strategies it uses to set permissions is not subject to the umask. This causes files in a repository to be world-writable in some situations.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;Git repositories track executable bits for regular files. In tree objects and the index, regular file modes are stored as 0644 if not executable, or 0755 if executable. But this is independent of how the permissions are set in the filesystem (where supported).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/function.rs#L8-L35&quot;&gt;&lt;code&gt;gix_worktree_state::checkout&lt;/code&gt;&lt;/a&gt; has two strategies for checking out a file and marking it executable on a Unix-like operating system, one of which is vulnerable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the file is created by assuming it does not already exist, correct permissions are applied, because permissions specified when opening a file are subject to the umask.&lt;/li&gt;
&lt;li&gt;If the file is considered possibly already to exist—even in a clean checkout if the application does not specify the option to treat the destination directory as empty—then permissions conferring unrestricted access to any user account on the system are wrongly applied, because permissions specified when calling chmod on an existing file are not subject to the umask. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifically, &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L56-L191&quot;&gt;&lt;code&gt;checkout::entry::checkout&lt;/code&gt;&lt;/a&gt; chooses the strategy for each file. The same strategy is usually chosen for each executable file, if no &lt;a href=&quot;https://github.com/git/git/blob/a60673e9252b08d4eca90543b3729f4798b9aafd/Documentation/RelNotes/2.11.0.txt#L149-L154&quot;&gt;process&lt;/a&gt; (i.e. &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/discussions/996&quot;&gt;long running&lt;/a&gt;) smudge filter is in use. The strategy depends on the &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L50-L53&quot;&gt;&lt;code&gt;checkout::Options::destination_is_initially_empty&lt;/code&gt;&lt;/a&gt; value, which is passed along to &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L253-L277&quot;&gt;&lt;code&gt;checkout::entry::open_file&lt;/code&gt;&lt;/a&gt;, whose return value includes a flag indicating whether permissions still need to be set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With &lt;code&gt;destination_is_initially_empty: true&lt;/code&gt;, executable permissions are specified when opening the file, via &lt;a href=&quot;https://doc.rust-lang.org/std/os/unix/fs/trait.OpenOptionsExt.html#tymethod.mode&quot;&gt;&lt;code&gt;OpenOptionsEx::mode&lt;/code&gt;&lt;/a&gt;, by its effect on the behavior of &lt;a href=&quot;https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.open&quot;&gt;&lt;code&gt;OpenOptions::open&lt;/code&gt;&lt;/a&gt;. A mode of 0777 is safe here, for the same reason the default mode of 0666 is safe. When creating a file, the applied mode is the specified mode with any bits unset from it that are set in the umask.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268&quot;&gt;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L265-L268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;set_executable_after_creation&lt;/code&gt; flag in the &lt;code&gt;open_file&lt;/code&gt; return value is then &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;code&gt;destination_is_initially_empty: false&lt;/code&gt;, executable permissions are set in a separate step, via &lt;a href=&quot;https://doc.rust-lang.org/beta/std/os/unix/fs/trait.PermissionsExt.html#tymethod.set_mode&quot;&gt;&lt;code&gt;PermissionsExt::set_mode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.rust-lang.org/beta/std/fs/fn.set_permissions.html&quot;&gt;&lt;code&gt;set_permissions&lt;/code&gt;&lt;/a&gt;. A mode of 0777 is not safe here, because the umask is not applied. The vulnerable code appears in &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L279-L299&quot;&gt;&lt;code&gt;checkout::entry::finalize_entry&lt;/code&gt;&lt;/a&gt;, which receives the &lt;code&gt;set_executable_after_creation&lt;/code&gt; flag originally from &lt;code&gt;open_file&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293&quot;&gt;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/entry.rs#L288-L293&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The file has unrestricted permissions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;finalize_entry&lt;/code&gt; is &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L229-L236&quot;&gt;likewise called&lt;/a&gt; from &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/chunk.rs#L157-L259&quot;&gt;&lt;code&gt;checkout::chunk::process_delayed_filter_results&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;PoC&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On a Unix-like system such as GNU/Linux or macOS, create a new project and define its dependencies. While the vulnerability is in &lt;code&gt;gix-worktree-state&lt;/code&gt;, this example will use vulnerable code through the &lt;code&gt;gix&lt;/code&gt; crate, which exposes it. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cargo new checkout-index
cd checkout-index
cargo add gix gix-object
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;checkout-index&lt;/code&gt; directory, edit &lt;code&gt;src/main.rs&lt;/code&gt; so that its entire contents are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let repo = gix::discover(&amp;quot;has-executable&amp;quot;)?;
    let mut index = repo.open_index()?;
    gix::worktree::state::checkout(
        &amp;amp;mut index,
        repo.work_dir().ok_or(&amp;quot;need non-bare repo&amp;quot;)?,
        gix_object::find::Never, // Can also use: repo.objects.clone()
        &amp;amp;gix::progress::Discard,
        &amp;amp;gix::progress::Discard,
        &amp;amp;Default::default(),
        Default::default(),
    )?;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the test repository that the vulnerable program will operate on. Still in the &lt;code&gt;checkout-index&lt;/code&gt; directory, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git init has-executable
touch has-executable/a has-executable/b
chmod +x has-executable/b
git -C has-executable add .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not necessary to commit the changes, only to stage them, since the test program will check  out the index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Optionally&lt;/em&gt;, run &lt;code&gt;rm has-executable/[ab]&lt;/code&gt; to remove the staged files from disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the program by issuing &lt;code&gt;cargo run&lt;/code&gt;. The program uses &lt;code&gt;gix-worktree-state&lt;/code&gt; to check out the index. It should terminate successfully and not issue any errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;ls -l has-executable&lt;/code&gt; to inspect the permissions of the checked out files. Observe that owner, group, and other all have read, write, and execute permissions on &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-rw-r--r-- 1 ek ek 0 Jan  9 03:38 a
-rwxrwxrwx 1 ek ek 0 Jan  9 03:38 b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With affected versions of &lt;code&gt;gix-worktree-state&lt;/code&gt;, the output shows &lt;code&gt;-rwxrwxrwx&lt;/code&gt; for &lt;code&gt;b&lt;/code&gt;, whether the files were removed in step 4 or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was not necessary to set &lt;code&gt;destination_is_initially_empty&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; explicitly to trigger the bug, because that is its default value. If desired, modify the program to pass &lt;code&gt;true&lt;/code&gt; and rerun the experiment to verify that &lt;code&gt;b&lt;/code&gt; is no longer created with excessive permissions. The modified program would change the last &lt;code&gt;checkout&lt;/code&gt; argument from &lt;code&gt;Default::default(),&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;        gix::worktree::state::checkout::Options {
            destination_is_initially_empty: true,
            ..Default::default()
        },
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Impact&lt;/h3&gt;
&lt;p&gt;Setting unlimited file permissions is a problem on systems where a user account exists on the system that should not have the ability to access and modify the files. That applies to multi-user systems, or when an account is used to run software with reduced abilities. (Some programs may also treat broad write permissions to mean less validation is required.)&lt;/p&gt;
&lt;p&gt;This bug affects Unix-like systems but not Windows. The &lt;code&gt;gix clone&lt;/code&gt; command is not believed to be affected, due to &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L14-L172&quot;&gt;&lt;code&gt;checkout_exclusive&lt;/code&gt;&lt;/a&gt;&apos;s &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/af704f57bb9480c47cdd393465264d586f1d4562/gitoxide-core/src/index/checkout.rs#L61&quot;&gt;use&lt;/a&gt; of &lt;code&gt;destination_is_initially_empty: true&lt;/code&gt;. Specialized uses in which repositories are known never to have any files marked executable are unaffected. Repositories that no untrusted users can access, due to not having the ability to traverse the directories to them or due to sufficiently restrictive ACLs, are likewise unaffected.&lt;/p&gt;
&lt;p&gt;The default value of &lt;code&gt;destination_is_initially_empty&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, so some applications may be affected even if they don&apos;t attempt checkouts in nonempty directories. The 0777 permissions are applied to files that are created earlier in the same checkout, as well as those that already existed, regardless of their prior permissions. On preexisting files, 0777 is set &lt;em&gt;even if &lt;a href=&quot;https://github.com/GitoxideLabs/gitoxide/blob/8d84818240d44e1f5fe78a231b5d9bffd0283918/gix-worktree-state/src/checkout/mod.rs#L54-L58&quot;&gt;&lt;code&gt;overwrite_existing&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt;&lt;/em&gt;, as that prevents the checkout from changing file contents but not permissions.&lt;/p&gt;
&lt;p&gt;Files not tracked/staged as executable are not checked out with insecure permissions. Such a file that previously existed keeps its old permissions. However, this may include executable permissions that no longer match repository metadata, as well as undesired write permissions acquired from a previous vulnerable checkout. &lt;code&gt;set_mode(0o777)&lt;/code&gt; clears other bits, so the bug is not exacerbated by the presence of setuid/setgid bits. In some applications, the vulnerable strategy may be used only for files rewritten by a &lt;a href=&quot;https://git-scm.com/docs/gitattributes/2.40.0#_long_running_filter_process&quot;&gt;long running&lt;/a&gt; smudge filter or only in the presence of &lt;a href=&quot;https://git-scm.com/docs/gitattributes/2.40.0#_delay&quot;&gt;delays&lt;/a&gt;.&lt;/p&gt;


    &lt;p id=&quot;license&quot; class=&quot;license&quot;&gt;Advisory available under &lt;a href=&quot;https://spdx.org/licenses/CC0-1.0.html&quot;&gt;CC0-1.0&lt;/a&gt;
    license.

    
    &lt;/p&gt;
  &lt;/article&gt;</content></entry></feed>