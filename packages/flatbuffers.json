[
  {
    "id": "RUSTSEC-2021-0122",
    "modified": "2023-06-13T13:10:24Z",
    "published": "2021-10-31T12:00:00Z",
    "aliases": [
      "GHSA-3jch-9qgp-4844"
    ],
    "related": [],
    "summary": "Generated code can read and write out of bounds in safe code",
    "details": "Code generated by flatbuffers' compiler is `unsafe` but not marked as such.\nSee https://github.com/google/flatbuffers/issues/6627 for details.\n\nFor example, if generated code is used to decode malformed or untrusted input,\nundefined behavior (and thus security vulnerabilities) is possible even without\nthe use of the `unsafe` keyword, [violating the the meaning of \"safe\"](https://doc.rust-lang.org/std/keyword.unsafe.html#the-different-meanings-of-unsafe) code;\n\nAll users that use generated code by `flatbuffers` compiler are recommended to:\n1. not expose flatbuffer generated code as part of their public APIs\n2. audit their code and look for any usage of `follow`, `push`, or any method that uses them\n   (e.g. `self_follow`).\n3. Carefully go through the crates' documentation to understand which \"safe\" APIs are not\n   intended to be used.",
    "severity": [
      {
        "type": "CVSS_V3",
        "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      }
    ],
    "affected": [
      {
        "package": {
          "ecosystem": "crates.io",
          "name": "flatbuffers",
          "purl": "pkg:cargo/flatbuffers"
        },
        "ecosystem_specific": {
          "affects": {
            "arch": [],
            "os": [],
            "functions": []
          },
          "affected_functions": null
        },
        "database_specific": {
          "categories": [],
          "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "informational": null
        },
        "ranges": [
          {
            "type": "SEMVER",
            "events": [
              {
                "introduced": "0.0.0-0"
              },
              {
                "fixed": "22.9.29"
              }
            ]
          }
        ],
        "versions": []
      }
    ],
    "references": [
      {
        "type": "PACKAGE",
        "url": "https://crates.io/crates/flatbuffers"
      },
      {
        "type": "ADVISORY",
        "url": "https://rustsec.org/advisories/RUSTSEC-2021-0122.html"
      },
      {
        "type": "REPORT",
        "url": "https://github.com/google/flatbuffers/issues/6627"
      }
    ],
    "database_specific": {
      "license": "CC0-1.0"
    }
  },
  {
    "id": "RUSTSEC-2019-0028",
    "modified": "2023-06-13T13:10:24Z",
    "published": "2019-10-20T12:00:00Z",
    "aliases": [
      "CVE-2019-25004",
      "GHSA-gx73-2498-r55c"
    ],
    "related": [],
    "summary": "Unsound `impl Follow for bool`",
    "details": "The implementation of `impl Follow for bool` allows to reinterpret arbitrary bytes as a `bool`.\n\nIn Rust `bool` has stringent requirements for its in-memory representation. Use of this function\nallows to violate these requirements and invoke undefined behaviour in safe code.",
    "severity": [
      {
        "type": "CVSS_V3",
        "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      }
    ],
    "affected": [
      {
        "package": {
          "ecosystem": "crates.io",
          "name": "flatbuffers",
          "purl": "pkg:cargo/flatbuffers"
        },
        "ecosystem_specific": {
          "affects": {
            "arch": [],
            "os": [],
            "functions": [
              "flatbuffers::Follow::follow"
            ]
          },
          "affected_functions": null
        },
        "database_specific": {
          "categories": [],
          "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "informational": null
        },
        "ranges": [
          {
            "type": "SEMVER",
            "events": [
              {
                "introduced": "0.4.0"
              },
              {
                "fixed": "0.6.1"
              }
            ]
          }
        ],
        "versions": []
      }
    ],
    "references": [
      {
        "type": "PACKAGE",
        "url": "https://crates.io/crates/flatbuffers"
      },
      {
        "type": "ADVISORY",
        "url": "https://rustsec.org/advisories/RUSTSEC-2019-0028.html"
      },
      {
        "type": "REPORT",
        "url": "https://github.com/google/flatbuffers/issues/5530"
      }
    ],
    "database_specific": {
      "license": "CC0-1.0"
    }
  },
  {
    "id": "RUSTSEC-2020-0009",
    "modified": "2023-06-13T13:10:24Z",
    "published": "2020-04-11T12:00:00Z",
    "aliases": [
      "CVE-2020-35864",
      "GHSA-c9h5-hf8r-m97x"
    ],
    "related": [],
    "summary": "`read_scalar` and `read_scalar_at` allow transmuting values without `unsafe` blocks",
    "details": "The `read_scalar` and `read_scalar_at` functions are unsound\nbecause they allow transmuting values without `unsafe` blocks.\n\nThe following example shows how to create a dangling reference:\n\n```\nfn main() {\n    #[derive(Copy, Clone, PartialEq, Debug)]\n    struct S(&'static str);\n    impl flatbuffers::EndianScalar for S {\n        fn to_little_endian(self) -> Self { self }\n        fn from_little_endian(self) -> Self { self }\n    }\n    println!(\"{:?}\", flatbuffers::read_scalar::<S>(&[1; std::mem::size_of::<S>()]));\n}\n```",
    "severity": [
      {
        "type": "CVSS_V3",
        "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
      }
    ],
    "affected": [
      {
        "package": {
          "ecosystem": "crates.io",
          "name": "flatbuffers",
          "purl": "pkg:cargo/flatbuffers"
        },
        "ecosystem_specific": {
          "affects": {
            "arch": [],
            "os": [],
            "functions": [
              "flatbuffers::read_scalar",
              "flatbuffers::read_scalar_at"
            ]
          },
          "affected_functions": null
        },
        "database_specific": {
          "categories": [],
          "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "informational": null
        },
        "ranges": [
          {
            "type": "SEMVER",
            "events": [
              {
                "introduced": "0.4.0"
              },
              {
                "fixed": "2.0.0"
              }
            ]
          }
        ],
        "versions": []
      }
    ],
    "references": [
      {
        "type": "PACKAGE",
        "url": "https://crates.io/crates/flatbuffers"
      },
      {
        "type": "ADVISORY",
        "url": "https://rustsec.org/advisories/RUSTSEC-2020-0009.html"
      },
      {
        "type": "REPORT",
        "url": "https://github.com/google/flatbuffers/issues/5825"
      }
    ],
    "database_specific": {
      "license": "CC0-1.0"
    }
  }
]